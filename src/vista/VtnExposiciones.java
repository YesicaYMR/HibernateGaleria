/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import com.toedter.calendar.IDateEvaluator;
import com.toedter.calendar.JDateChooser;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import operaciones.OperacionesAutor;
import operaciones.OperacionesExposiciones;
import operaciones.OperacionesObras;
import operaciones.OperacionesSala;

import pojos.Exposicion;
import pojos.ExposicionId;
import pojos.Obra;
import pojos.Sala;

/**
 *
 * @author Yesica
 */
public class VtnExposiciones extends javax.swing.JFrame {

    VtnInicio vtnInicio;
    DefaultListModel<String> modeloObrasSeleccionadas = new DefaultListModel<>();
    DefaultListModel<String> modeloObras = new DefaultListModel<>();
    DefaultComboBoxModel modeloSala;
    DefaultComboBoxModel modeloExposiciones;
    OperacionesSala operacionesSala = new OperacionesSala();
    OperacionesExposiciones operacionesExposiciones = new OperacionesExposiciones();
    OperacionesAutor operacionesAutor = new OperacionesAutor();
    OperacionesObras operacionesObras = new OperacionesObras();
    private Set<Integer> exposicionesSet;

    /**
     * Creates new form VtnExposiciones
     */
    public VtnExposiciones() {
        initComponents();
        pnlCrear.setVisible(false);
        pnlCancelar.setVisible(false);
        operacionesObras = new OperacionesObras();
        jLabel4.setVisible(false);
        jLabel5.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCrear = new javax.swing.JPanel();
        txtNombre = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstObras = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstSeleccionadas = new javax.swing.JList<>();
        btnAnadir = new javax.swing.JButton();
        btnQuitar = new javax.swing.JButton();
        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        cmbSala = new javax.swing.JComboBox<>();
        dateInicio = new com.toedter.calendar.JDateChooser();
        dateFin = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        pnlCancelar = new javax.swing.JPanel();
        cmbExposiciones = new javax.swing.JComboBox<>();
        lblSala = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblFechaInicio = new javax.swing.JLabel();
        lblFechaFin = new javax.swing.JLabel();
        btnCancelarExposicion = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnCrear = new javax.swing.JButton();
        titulo = new javax.swing.JLabel();
        lblRegresar = new javax.swing.JLabel();
        fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Exposiciones");
        setMinimumSize(new java.awt.Dimension(1030, 980));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlCrear.setOpaque(false);
        pnlCrear.setPreferredSize(new java.awt.Dimension(770, 600));

        txtNombre.setFont(new java.awt.Font("Lucida Sans", 0, 18)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nombre");

        jLabel2.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Fecha de inicio");

        jLabel3.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Fecha fin exposiciÃ³n");

        lstObras.setFont(new java.awt.Font("Lucida Sans", 0, 18)); // NOI18N
        jScrollPane1.setViewportView(lstObras);

        lstSeleccionadas.setFont(new java.awt.Font("Lucida Sans", 0, 18)); // NOI18N
        jScrollPane2.setViewportView(lstSeleccionadas);

        btnAnadir.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
        btnAnadir.setText(">>");
        btnAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnadirActionPerformed(evt);
            }
        });

        btnQuitar.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
        btnQuitar.setText("<<");
        btnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarActionPerformed(evt);
            }
        });

        btnAceptar.setBackground(java.awt.SystemColor.windowBorder);
        btnAceptar.setForeground(java.awt.Color.white);
        btnAceptar.setText("Aceptar");
        btnAceptar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnCancelar.setBackground(java.awt.SystemColor.windowBorder);
        btnCancelar.setForeground(java.awt.Color.white);
        btnCancelar.setText("Cancelar");
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        cmbSala.setFont(new java.awt.Font("Lucida Sans", 0, 18)); // NOI18N
        cmbSala.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        dateInicio.setEnabled(false);

        jLabel9.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Obras disponibles");

        jLabel10.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Obras seleccionadas");

        javax.swing.GroupLayout pnlCrearLayout = new javax.swing.GroupLayout(pnlCrear);
        pnlCrear.setLayout(pnlCrearLayout);
        pnlCrearLayout.setHorizontalGroup(
            pnlCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCrearLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(pnlCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAnadir)
                    .addComponent(btnQuitar))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
            .addGroup(pnlCrearLayout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(txtNombre)
                .addGap(16, 16, 16))
            .addGroup(pnlCrearLayout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addGroup(pnlCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addGroup(pnlCrearLayout.createSequentialGroup()
                        .addComponent(dateInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCrearLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(142, 142, 142))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCrearLayout.createSequentialGroup()
                        .addGroup(pnlCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(dateFin, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(130, 130, 130))))
            .addGroup(pnlCrearLayout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCrearLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCrearLayout.createSequentialGroup()
                        .addComponent(cmbSala, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(209, 209, 209))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCrearLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(332, 332, 332))))
        );
        pnlCrearLayout.setVerticalGroup(
            pnlCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(cmbSala, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateFin, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(pnlCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(pnlCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCrearLayout.createSequentialGroup()
                        .addGroup(pnlCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCrearLayout.createSequentialGroup()
                        .addComponent(btnAnadir)
                        .addGap(31, 31, 31)
                        .addComponent(btnQuitar)
                        .addGap(83, 83, 83)))
                .addGroup(pnlCrearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        getContentPane().add(pnlCrear, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 360, 770, 640));

        pnlCancelar.setOpaque(false);

        cmbExposiciones.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        cmbExposiciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbExposiciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbExposicionesActionPerformed(evt);
            }
        });

        lblSala.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        lblSala.setForeground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Sala");

        jLabel7.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Fecha final");

        jLabel8.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Fecha inicio");

        lblFechaInicio.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        lblFechaInicio.setForeground(new java.awt.Color(255, 255, 255));

        lblFechaFin.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        lblFechaFin.setForeground(new java.awt.Color(255, 255, 255));

        btnCancelarExposicion.setBackground(java.awt.SystemColor.windowBorder);
        btnCancelarExposicion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCancelarExposicion.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelarExposicion.setText("Cancelar exposiciÃ³n");
        btnCancelarExposicion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelarExposicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarExposicionActionPerformed(evt);
            }
        });

        btnLimpiar.setBackground(java.awt.SystemColor.windowBorder);
        btnLimpiar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpiar.setText("Limpiar");
        btnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCancelarLayout = new javax.swing.GroupLayout(pnlCancelar);
        pnlCancelar.setLayout(pnlCancelarLayout);
        pnlCancelarLayout.setHorizontalGroup(
            pnlCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCancelarLayout.createSequentialGroup()
                .addGroup(pnlCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlCancelarLayout.createSequentialGroup()
                            .addGap(143, 143, 143)
                            .addComponent(cmbExposiciones, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCancelarLayout.createSequentialGroup()
                            .addGap(221, 221, 221)
                            .addGroup(pnlCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCancelarLayout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(54, 54, 54)
                                    .addComponent(lblSala, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCancelarLayout.createSequentialGroup()
                                    .addGroup(pnlCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCancelarLayout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addGap(54, 54, 54))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCancelarLayout.createSequentialGroup()
                                            .addComponent(jLabel8)
                                            .addGap(60, 60, 60)))
                                    .addGroup(pnlCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblFechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(13, 13, 13)))))
                    .addGroup(pnlCancelarLayout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(btnCancelarExposicion, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(197, 197, 197)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(181, 181, 181))
        );
        pnlCancelarLayout.setVerticalGroup(
            pnlCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCancelarLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(cmbExposiciones, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(pnlCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSala, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(pnlCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFechaInicio, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(pnlCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblFechaFin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addGap(61, 61, 61)
                .addGroup(pnlCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelarExposicion, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(164, 164, 164))
        );

        getContentPane().add(pnlCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 320, 770, 630));

        jLabel5.setText("btnCancelar");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 290, -1, -1));

        jLabel4.setText("btnCrear");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 290, -1, -1));

        jButton1.setBackground(java.awt.SystemColor.windowBorder);
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Cancelar exposiciÃ³n");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 270, -1, 50));

        btnCrear.setBackground(java.awt.SystemColor.windowBorder);
        btnCrear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCrear.setForeground(new java.awt.Color(255, 255, 255));
        btnCrear.setText("Crear nueva exposiciÃ³n");
        btnCrear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });
        getContentPane().add(btnCrear, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 270, -1, 50));

        titulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/TituloExposiciones.png"))); // NOI18N
        getContentPane().add(titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 130, -1, -1));

        lblRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/botonVolver.png"))); // NOI18N
        lblRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRegresarMouseClicked(evt);
            }
        });
        getContentPane().add(lblRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, -1, -1));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Exposicion.jpeg"))); // NOI18N
        getContentPane().add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lblRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRegresarMouseClicked
        //vuelve a la pantalla de inicio y destruye esta
        vtnInicio = new VtnInicio();
        vtnInicio.setVisible(true);
        dispose();
    }//GEN-LAST:event_lblRegresarMouseClicked

    private void btnAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnadirActionPerformed
        int pos = lstObras.getSelectedIndex();//devuelve -1 si no ha seleccionado ninguna
        if (pos != -1) {
            String titulo = (String) modeloObras.get(pos);
            //aÃ±ade al list de obras seleccionadas
            modeloObrasSeleccionadas.addElement(titulo);
            //lo elimina de obras disponibles
            modeloObras.remove(pos);
            habilitar();
        } else {
            JOptionPane.showMessageDialog(this, "primero seleccione una obra", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAnadirActionPerformed

    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed

        int pos = lstSeleccionadas.getSelectedIndex();//devuelve -1 si no ha seleccionado ninguna
        if (pos != -1) {//controlamos que pos no sea -1
            String titulo = (String) modeloObrasSeleccionadas.get(pos);
            modeloObras.addElement(titulo);
            modeloObrasSeleccionadas.remove(pos);
            habilitar();

        } else {
            JOptionPane.showMessageDialog(this, "primero seleccione una obra", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnQuitarActionPerformed

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        pnlCrear.setVisible(true);
        pnlCancelar.setVisible(false);
        lstSeleccionadas.setModel(modeloObrasSeleccionadas);
        //obtiene las obras disponibles y las muestra
        mostrarObrasDisponibles();
        habilitar();
        //busca salas  disponibles y las carga al combo
        cargarSalas();
        Date hoy = new Date();
        //instancia los calendarios y establece la fecha del dÃ­a
        JDateChooser dateFin = new JDateChooser();
        dateInicio.setDate(new Date());
        dateFin.setDate(new Date());

    }//GEN-LAST:event_btnCrearActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        pnlCrear.setVisible(false);
        pnlCancelar.setVisible(true);
        btnCancelarExposicion.setEnabled(false);
        cargarComboExposiciones();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        // Obtener la fecha seleccionada
        Date fechaInicio = dateInicio.getDate();;
        Date fechaFin = dateFin.getDate();
        //si los datos son correctos
        if (comprobarDatos()) {
            String nombre = txtNombre.getText();
            Sala salaSeleccionada = (Sala) cmbSala.getSelectedItem();
            String sala = salaSeleccionada.getNombre();
            //Obras ya convertidas a objeto del list de seleccionadas
            ArrayList<Obra> obrasSeleccionadas = extraerLista();
            //extraemos el maximo id_exposicion y le sumamos 1 para establecerlo como nuevo id_exposicion
            int idExposicion = operacionesExposiciones.obtenerMaximoIdExposicion() + 1;
            //inserta la nueva exposicion en la bbdd
            registrarExposicion(obrasSeleccionadas, idExposicion, operacionesExposiciones, nombre, sala, fechaInicio,fechaFin);
            //modifica el estado de las obras seleccionadas y las vuelve inactivas
            for (Obra obra : obrasSeleccionadas) {
                operacionesObras.desactivarObra(obra.getIdObras());
            }
            limpiar();
        }


    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnCancelarExposicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarExposicionActionPerformed
        Exposicion c = (Exposicion) modeloExposiciones.getSelectedItem();
        int idExposicion = c.getId().getIdExposicion();
        //ejecuta sentencia para modificar la fecha de fin de la exposiciÃ³n y asi este inactiva
        operacionesExposiciones.cancelarExposicion(idExposicion);
        ArrayList<Integer> idObrasExpuestas = new ArrayList<Integer>(operacionesExposiciones.obtenerIdObrasPorIdExposicion(idExposicion));
        //activa las obras que estaban en esa exposiciÃ³n para que vuelvan a ser utilizadas
        for (int idObra : idObrasExpuestas) {
            operacionesObras.ActivarObra(idObra);
        }
        cmbExposiciones.removeAll();
        cargarComboExposiciones();
        limpiarCancelar();


    }//GEN-LAST:event_btnCancelarExposicionActionPerformed

    private void cmbExposicionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbExposicionesActionPerformed
        int pos = cmbExposiciones.getSelectedIndex();
        if (pos != 0) {
            try {
                limpiarCancelar();
            } catch (Exception ex) {
            }
            Exposicion c = (Exposicion) modeloExposiciones.getSelectedItem();
            lblFechaInicio.setText(c.getFechAlta().toString());
            lblFechaFin.setText(c.getFechBaja().toString());
            //obtener el nombre de la sala a traves de su id para mostrarlo
            lblSala.setText(operacionesSala.obtenerNombreSalaPorId(c.getSala().getIdSala()));
            btnCancelarExposicion.setEnabled(true);
        } else {
            limpiarCancelar();
            btnCancelarExposicion.setEnabled(false);
        }
    }//GEN-LAST:event_cmbExposicionesActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarCancelar();
        cmbExposiciones.setSelectedIndex(0);
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        limpiarPanelCrear();
    }//GEN-LAST:event_btnCancelarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnAnadir;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCancelarExposicion;
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JComboBox<String> cmbExposiciones;
    private javax.swing.JComboBox<String> cmbSala;
    private com.toedter.calendar.JDateChooser dateFin;
    private com.toedter.calendar.JDateChooser dateInicio;
    private javax.swing.JLabel fondo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblFechaFin;
    private javax.swing.JLabel lblFechaInicio;
    private javax.swing.JLabel lblRegresar;
    private javax.swing.JLabel lblSala;
    private javax.swing.JList<String> lstObras;
    private javax.swing.JList<String> lstSeleccionadas;
    private javax.swing.JPanel pnlCancelar;
    private javax.swing.JPanel pnlCrear;
    private javax.swing.JLabel titulo;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    /**
     * Carga las salas disponibles en el ComboBox de salas.
     */
    private void cargarSalas() {
        modeloSala = new DefaultComboBoxModel();
        cmbSala.setModel(modeloSala);
        modeloSala.addElement("--Seleccione una sala--");

        // Obtener las salas disponibles
        List<Sala> salas = operacionesSala.obtenerSalasLibres();
        // List<Sala> salas = operacionesSala.obtenerTodasSalas();
        for (Sala sala : salas) {
            modeloSala.addElement(sala);
        }
    }

    /**
     * Convierte una lista de nombres de obras en una lista de objetos de tipo
     * Obra.
     *
     * @param nombreObrasSeleccionadas Lista de nombres de obras seleccionadas.
     * @return Lista de objetos de tipo Obra.
     */
    private ArrayList<Obra> pasarNombreaObjeto(ArrayList<String> nombreObrasSeleccionadas) {
        ArrayList<Obra> obras = new ArrayList<>();
        for (String nombre : nombreObrasSeleccionadas) {
            // Convertir el nombre de la obra en un objeto de tipo Obra
            obras.add(operacionesObras.obtenerObrasPorNombre(nombre));
        }
        return obras;
    }

    /**
     * Verifica si los datos ingresados son vÃ¡lidos.
     *
     * @return true si los datos son correctos, false de lo contrario.
     */
    private boolean comprobarDatos() {
        boolean correcto = false;
        String nombre = txtNombre.getText();
        Date fechaFin = dateFin.getDate();
        Date hoy = new Date();
        //Comprueba si se ha introducido texto
        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe introducir un nombre");
        } else if (fechaFin == null) {
            JOptionPane.showMessageDialog(this, "Debe elegir una fecha fin");
        } //comprueba si la fecha es anterior o igual a la actual
        else if (fechaFin.before(hoy) || fechaFin.equals(hoy)) {
            JOptionPane.showMessageDialog(this, "Debe elegir una fecha posterior a la actual");
        } //comprueba si se han seleccionado obras
        else if (modeloObrasSeleccionadas.size() == 0) {
            JOptionPane.showMessageDialog(this, "Debe elegir al menos una obra");
        } //Comprueba si se ha elegido una sala
        else if (cmbSala.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Debe elegir una sala");
        } else {
            correcto = true;
        }
        return correcto;
    }

    /**
     * Carga las exposiciones activas disponibles en el ComboBox de
     * exposiciones.
     */
    private void cargarComboExposiciones() {
        modeloExposiciones = new DefaultComboBoxModel<>();
        cmbExposiciones.setModel(modeloExposiciones);
        modeloExposiciones.addElement("--Seleccione una exposiciÃ³n--");

        // Obtener exposiciones activas
        List<Exposicion> exposiciones = operacionesExposiciones.obtenerExposicionesActivas();
        // Inicializar el conjunto
        exposicionesSet = new HashSet<>();

        for (Exposicion exposicion : exposiciones) {
            // Verificar si la exposiciÃ³n no estÃ¡ en el conjunto antes de agregarla al modelo
            //Los conjuntos no admiten varoles repetidos
            if (!exposicionesSet.contains(exposicion.getId().getIdExposicion())) {
                modeloExposiciones.addElement(exposicion);
                // Agregar la exposiciÃ³n al conjunto
                exposicionesSet.add(exposicion.getId().getIdExposicion());
            }
        }
    }

    /**
     * Limpia los campos relacionados con la cancelaciÃ³n de exposiciÃ³n.
     */
    private void limpiarCancelar() {
        lblFechaInicio.setText("");
        lblFechaFin.setText("");
        lblSala.setText("");

    }

    /**
     * Limpia los campos del panel de creaciÃ³n de exposiciÃ³n.
     */
    private void limpiarPanelCrear() {
        txtNombre.setText("");
        cmbSala.setSelectedIndex(0);
        dateInicio.setDate(new Date());
        dateFin.setDate(new Date());
        modeloObrasSeleccionadas.removeAllElements();
        modeloObras.removeAllElements();
        lstObras.removeAll();
        mostrarObrasDisponibles();
    }

    /**
     * Muestra las obras disponibles en el JList de obras.
     */
    private void mostrarObrasDisponibles() {
        // Obtener la lista de obras disponibles
        List<Obra> obrasDisponibles = operacionesObras.obtenerObrasDisponibles();
        modeloObras.removeAllElements();
        for (Obra obra : obrasDisponibles) {
            modeloObras.addElement(obra.getNombre());
        }
        // Establecer el modelo en el JList
        lstObras.setModel(modeloObras);
    }

    /**
     * Habilita o deshabilita los botones segÃºn el estado de los modelos de
     * obras.
     */
    private void habilitar() {
        if (modeloObrasSeleccionadas.isEmpty()) {
            btnQuitar.setEnabled(false);
        } else {
            btnQuitar.setEnabled(true);
        }
        if (modeloObras.isEmpty()) {
            btnAnadir.setEnabled(false);
        } else {
            btnAnadir.setEnabled(true);
        }
    }

    /**
     * Limpia los campos del formulario.
     */
    private void limpiar() {
        txtNombre.setText("");
        cmbSala.setSelectedIndex(0);
        modeloObrasSeleccionadas.removeAllElements();//borra todos los elementos
        modeloObras.removeAllElements();
        mostrarObrasDisponibles();
        cmbSala.removeAllItems();
        cargarSalas();
    }

    /**
     * Registra una exposiciÃ³n con las obras seleccionadas.
     *
     * @param obrasSeleccionadas Lista de obras seleccionadas para la
     * exposiciÃ³n.
     * @param idExposicion ID de la exposiciÃ³n.
     * @param operacionesExposiciones Instancia de OperacionesExposiciones para
     * realizar operaciones de exposiciones.
     * @param nombre Nombre de la exposiciÃ³n.
     * @param sala Sala de la exposiciÃ³n.
     * @param fechaFin Fecha de finalizaciÃ³n de la exposiciÃ³n.
     */
    private void registrarExposicion(ArrayList<Obra> obrasSeleccionadas, int idExposicion, OperacionesExposiciones operacionesExposiciones, String nombre, String sala,Date fechaInicio, Date fechaFin) {
        for (Obra obra : obrasSeleccionadas) {
            // Obtener el ID de la obra
            int idObra = obra.getIdObras();
            // Crear el objeto ExposicionId con el ID de la exposiciÃ³n y el ID de la obra
            ExposicionId exposicionid = new ExposicionId(idExposicion, idObra);
            // Crear la exposiciÃ³n y verificar si se realizÃ³ con Ã©xito
            if (!operacionesExposiciones.crearExposicion(exposicionid, nombre, sala, fechaInicio, fechaFin, obra)) {
                JOptionPane.showMessageDialog(this, "Ha ocurrido un error", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        JOptionPane.showMessageDialog(this, "Exposicion registrada");
    }

    /**
     * Extrae una lista de tipo String de obras seleccionadas del modelo.
     *
     * @return Lista de objetos de obras seleccionadas.
     */
    private ArrayList<Obra> extraerLista() {
        ArrayList<String> nombreObrasSeleccionadas = new ArrayList<>();
        // Recorre el modelo de obras seleccionadas para obtener los nombres de las obras
        for (int i = 0; i < modeloObrasSeleccionadas.size(); i++) {
            nombreObrasSeleccionadas.add((String) modeloObrasSeleccionadas.getElementAt(i));
        }
        // Convierte los nombres de las obras en objetos de tipo Obra
        ArrayList<Obra> obrasSeleccionadas = pasarNombreaObjeto(nombreObrasSeleccionadas);
        return obrasSeleccionadas;
    }

}
